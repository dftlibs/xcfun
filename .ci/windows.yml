steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
    displayName: "Using Python version: $(python.version)"

  - script: |
      python -m pip install --upgrade pip pytest numpy
    displayName: 'Pip install Python dependencies'

  - task: CMake@1
    inputs:
      workingDirectory: 'build'
      cmakeArgs: '-A x64 -DCMAKE_CONFIGURATION_TYPES=Release -DXCFUN_PYTHON_INTERFACE=ON -DCMAKE_INSTALL_PREFIX=..\Software\xcfun ..'

  # Build
  - script: |
      cmake --build build ^
            --config Release ^
            --target install ^
            -- -verbosity:normal
    displayName: "Build XCFun"

  # Test (ctest)
  - script: |
      cd build
      ls lib\python
      ls lib\python\xcfun
      ls lib\python\xcfun\Release
      ctest -C Release ^
            --output-on-failure ^
            --verbose
    displayName: "Test XCFun with CTest"
    continueOnError: true

  # Test Python module can be imported
  - script: |
      ls .\Software\xcfun\lib\python
      ls .\Software\xcfun\lib\python\xcfun
      set PYTHONPATH=.\Software\xcfun\lib\python;%PYTHONPATH%
      python -c "import xcfun; print(xcfun.xcfun_splash())"
    displayName: "Test XCFun Python module"
    continueOnError: true

  # Test we can build the C++ example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_CXX_host'
      cmakeArgs: '-A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\CXX_host'

  - script: |
      cd build_CXX_host
      cmake --build . ^
            --config Release ^
            -- -verbosity:normal
    displayName: "Build C++ host example"

  # Test we can build the C example
  - task: CMake@1
    inputs:
      workingDirectory: 'build_C_host'
      cmakeArgs: '-A x64 -DXCFun_DIR=..\..\Software\xcfun\CMake ..\examples\C_host'

  - script: |
      cd build_C_host
      cmake --build . ^
            --config Release ^
            -- -verbosity:normal
    displayName: "Build C host example"
